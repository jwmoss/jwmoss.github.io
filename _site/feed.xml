<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-06T19:34:08-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>GitHub User</name><email>your-email@domain.com</email></author><entry><title type="html">My Powershell Journey</title><link href="http://localhost:4000/blog/my-powershell-journey.html" rel="alternate" type="text/html" title="My Powershell Journey" /><published>2018-10-01T00:00:00-04:00</published><updated>2018-10-01T00:00:00-04:00</updated><id>http://localhost:4000/blog/My-Powershell-Journey</id><content type="html" xml:base="http://localhost:4000/blog/my-powershell-journey.html"><![CDATA[<h1 id="my-powershell-journey">My Powershell Journey</h1>

<p>I’ve met a handful of folks who, when I talk to them about automating the boring stuff, they tend to shrug it off and say “I don’t have time” or “I’m not a developer”. This blog is for you (or if you want to know my journey of how I changed my career by learning Powershell).</p>

<p>I’ve been in IT for over 5 years, and have specifically been using Powershell at work for the last 3 years, and meaningfully in the last 2 years.</p>

<h2 id="a-powershell-noob">A Powershell Noob</h2>

<p>Two years ago, I was using powershell to run a handful of “one-liners”. Such as:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADUser</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">jmoss</span><span class="w">
</span></code></pre></div></div>

<p>Which returned some interesting data. With this in mind, I would simply find the data I’m looking for, and paste it into notepad or an email to my boss. What I didn’t realize was this concept that <strong>properties should be treated as objects.</strong></p>

<p>Once I realized that most of what I write in Powershell can be treated as an object, a light-bulb clicked. This happend about a year and a half ago, in early 2017. It was then where I realized that I had approached Powershell all wrong. It wasn’t just another prompt to view an IP Address or list a phone number of an Active Directory user, it was the glue to automating everything I need and exporting it to anything I want.</p>

<p>It was at this point when I started to really kick it into high gear and force myself to use Powershell daily, and not just to get information randomly.</p>

<h2 id="walking-with-powershell">Walking with Powershell</h2>

<p>At an old company I used to work for, our IT department would receive html files from a vendor that included a bunch of tables with data in them, which needed to be exported to a txt file and <em>finally</em> imported into a SQL Server. The vendor had been sending us data in this format because their ERP only allowed for that (what year is it?!!??!?).</p>

<p>Our IT department was spending 1.5 hours <em>a day</em> parsing this data manually. There was clearly a problem that could be resolved with Powershell.</p>

<p>I used Powershell to parse the data in these HTML files using <a href="https://github.com/dfinke/ImportExcel">ImportExcel</a>’s <code class="language-plaintext highlighter-rouge">Get-HTMLTable</code> cmdlet, grab the data, store it in variables, and then export to a TXT file using <code class="language-plaintext highlighter-rouge">Out-File</code> to a fileshare.</p>

<p>When all was said and done, I ended up creating a 50-60 line script that saved our department about 10 hours a week in manual work that was otherwise deemed “too difficult” to automate.</p>

<p>As far as I know, this code is still being used in production.</p>

<p>It was <em>ugly</em> code, but it worked, and gave me a ton of insight in how to use <a href="https://kevinmarquette.github.io/2016-10-28-powershell-everything-you-wanted-to-know-about-pscustomobject/">PSCustomobject</a>’s and using Git to ensure my code was versioned-controlled.</p>

<h2 id="crawling-with-powershell">Crawling with Powershell</h2>

<p>Around the time, I continued to learn more and more about Powershell by attempting to automate other things at work, developed a git repository with VSTS and integrated it into VS Code, shared that code with a co-worker, and encouraged my co-worker to develop his own script and add it to the collection.</p>

<p>I continued developing scripts to deploy a virtual machine in our environment and copy files to 60 physical servers.</p>

<h2 id="running-with-powershell">Running with Powershell</h2>

<p><em>to be continued</em></p>

<h2 id="recap">Recap</h2>

<p>To recap, here’s a few highlights of my journey and observations that I’ve made in the last 2 years:</p>

<ul>
  <li>I’m nowhere close to “running with Powershell” but I intend to keep using Powershell to automate what I can.</li>
  <li>I’ve used Powershell almost daily at work for the last 2 years to automate business “tasks” and produce reports (mostly for myself or my team)</li>
  <li>Companies are hiring people who know Powershell. I’ve nearly doubled my Salary since first being exposed to Powershell about 3 years ago.</li>
  <li>Powershell can now be used on macOS, Linux, and Windows + it’s open-sourced, meaning it will continue to get better.</li>
  <li>Every software service that Microsoft publishes (AD, DNS, DHCP, Azure, O365, Sharepoint, etc) can be managed/automated using Powershell (and Powershell Core!).</li>
</ul>

<p>Overall, don’t be afraid to just dive in and start solving a <em>real</em> problem at work with Powershell, and not just simply learn about the concepts (which is also extremely important).</p>

<p>Here are some ways to jump in and start growing in your career using Powershell:</p>

<ul>
  <li>Join the <a href="http://slack.poshcode.org/">Powershell Slack</a> and read what others are doing with it.</li>
  <li>Go on <a href="https://github.com/trending/powershell">Github</a> and see what others are doing with Powershell.</li>
  <li>Go to the <a href="https://www.reddit.com/r/powershell">Powershell</a> subreddit and read the posts where people talk about what they’ve done with Powershell each month (link <a href="https://old.reddit.com/r/PowerShell/search?q=what+have+you+done&amp;restrict_sr=on&amp;sort=relevance&amp;t=all">here</a>).</li>
</ul>]]></content><author><name>Jonathan Moss</name></author><summary type="html"><![CDATA[My Powershell Journey]]></summary></entry><entry><title type="html">Creating and Deploying VM Templates with Packer and Powershell</title><link href="http://localhost:4000/blog/automating-template-builds-with-packer.html" rel="alternate" type="text/html" title="Creating and Deploying VM Templates with Packer and Powershell" /><published>2018-07-07T00:00:00-04:00</published><updated>2018-07-07T00:00:00-04:00</updated><id>http://localhost:4000/blog/Automating-Template-Builds</id><content type="html" xml:base="http://localhost:4000/blog/automating-template-builds-with-packer.html"><![CDATA[<p><strong>Updated: 12/15/2018</strong></p>

<p>I stumbled upon an issue at work which allowed for an opportunity to build virtual machine (VM) templates within vCenter. I wanted to find a way to automate the process because there are lots of ways to screw up a VM template, and if you screw it up in the beginning, the issue(s) will be present through the lifecycle of the Server. No fun!</p>

<p>Here are the things required in order to automate the creation of a VM template:</p>

<ul>
  <li>Packer</li>
  <li><a href="https://github.com/jetbrains-infra/packer-builder-vsphere">JetBrain’s Packer Plugin for vSphere</a></li>
  <li><a href="https://github.com/jetbrains-infra/packer-builder-vsphere/releases">JetBrain’s Packer Executable</a></li>
  <li>Windows Server 2016 ISO (Evaluation copy works)</li>
  <li>Paravirtual SCSI floppy image for Windows 8, <a href="https://kb.vmware.com/s/article/1010398">found on your ESXi host</a></li>
  <li>VMware Tools ISO (I’ve renamed to Windows.iso for ease of use)</li>
</ul>

<p>Let’s start!</p>

<p>I begun by creating a repository with the following structure:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── Setup
│   ├── Enable-WinRM.ps1
│   ├── vmtools.cmd
│   ├── autounattend.xml
├── Binaries
│   ├── packer.exe
│   ├── packer-builder-vsphere-clone.exe
│   ├── packer-builder-vsphere-iso.exe
├── README.md
├── Scripts
│   ├── Install-Boxstarter.ps1
│   ├── Install-Chocolatey.ps1
│   ├── Invoke-Cleanup.ps1
│   ├── Invoke-SystemCleanup.ps1
│   ├── Invoke-SystemUpdate.ps1
│   ├── Set-ChocolateySettings.ps1
│   ├── Set-Timezone.ps1
├── ConfigurationFiles
│   ├── server-2016.json
</code></pre></div></div>

<p>In a datastore of your choosing in vCenter, create a folder called <code class="language-plaintext highlighter-rouge">ISO</code> and upload the following:</p>

<ul>
  <li>Server 2016 ISO <code class="language-plaintext highlighter-rouge">14393.0.161119-1705.RS1_REFRESH_SERVER_EVAL_X64FRE_EN-US.ISO</code></li>
  <li>VMware Tools ISO <code class="language-plaintext highlighter-rouge">Windows.iso</code></li>
  <li>Windows floppy image <code class="language-plaintext highlighter-rouge">pvscsi-Windows8.flp</code></li>
</ul>

<p>Once you’ve done that, create your autounattend.xml file and store in your git repository. You can use <a href="https://github.com/jwmoss/powershell_scripts/blob/master/Packer/Setup/autounattend.xml">my customized autounattend.xml file</a> as an example, as I’ve taken cues from several repositories and from <a href="https://github.com/jetbrains-infra/packer-builder-vsphere/tree/master/examples/windows/setup">JetBrain’s Repo</a>, or build your own.</p>

<p>Once you’ve created the autounattend.xml file, uploaded the files neceessary to the vCenter Datastore, you’re finally ready to begin cusotmizing the <a href="https://www.packer.io/docs/templates/index.html">Packer Template</a> which are JSON files that configure the various components of Packer in order to create one or more machine images.</p>

<p>Here’s an example JSON file that I used with Server 2016. The latest version will be stored in my <a href="https://github.com/jwmoss/powershell_scripts/tree/master/Packer">Github Repository</a>.</p>

<p>Once you’ve created the JSON file, and have all parts in place, simply execute <code class="language-plaintext highlighter-rouge">Packer.exe</code> from your workstation. I have an example of doing it from Jenkins:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function Invoke-TemplateBuild {
    param (
        [Parameter(Mandatory = $true)]
        [string]$vCenterServer,
        [Parameter(Mandatory = $true)]
        [string]$TemplateFolder,
        [Parameter(Mandatory = $true)]
        [string]$TemplateName,
        [Parameter(Mandatory = $true)]
        [string]$ConfigurationFile
    )
 
    &lt;#
.SYNOPSIS
    Executes Packer Template Build against a vCenter. This script is designed to run from Jenkins.
.EXAMPLE
    PS C:\&gt; Invoke-TemplateBuild.ps1 -vCenter vcenter.fqdn.com -TemplateFolder TemplateFolder -TemplateName Win2016 -ConfigurationFile Server2016.json
    Executes packer.exe, connects to a vCenter and moves the template to the correct folder.
.NOTES
    v1.0.0 - 7/9/18 - Jonathan Moss
    v1.0.1 - 7/11/18 - Remove existing template prior to deploying new one
    v1.0.2 - 10/22/18 - Added parameters to support targetting multiple vCenters
#&gt;

    Import-Module VMware.PowerCLI | Out-Null

    ## Define Jenkins parameters and pass through credentials stored in Jenkins using Credentials Binding plugin.
    $SecurePassword = $env:vCenterPassword | ConvertTo-SecureString -AsPlainText -Force
    $vCenterCred = New-Object System.Management.Automation.PSCredential -ArgumentList $env:vCenterAdmin, $SecurePassword

    Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false

    ## Connect to vCenter with stored credentials
    try {
        Connect-VIServer -Server $vCenterServer -Protocol https -Credential $vCenterCred -ErrorAction Stop
        Write-Output "Successfully connected to $vcenterServer! Continuing.."   
    }
    catch {
        Write-Output "Could not connect to $vcenterserver"
        Write-Host $_.Exception.Message
        Write-Host $_.Exception.ItemName
    }

    try {
        $VMTemplate = Get-Template -Name $TemplateName -ErrorAction STOP
        if ($VMTemplate) {
            try {
                Remove-Template -Template $VMTemplate -Confirm:$false -ErrorAction STOP
            }
            catch {
                ## If template is found, yet can't be removed, exit the script.
                Write-Output "Could not delete, skipping..."
                Write-Output "Manually delete $VMTemplate from $vcenterServer"
                Break
            }
        }   
    }
    catch {
        Write-Host "No template found! Continuing.."
        Write-Host $_.Exception.Message
        Write-Host $_.Exception.ItemName
    }

    $params = @{
        FilePath         = "$ENV:WORKSPACE\Binaries\packer.exe"
        ArgumentList     = "build -var `"password=$($env:vCenterPassword)`" -var `"winrm_password=$($env:LocalAdminPassword)`" `"$($ENV:WORKSPACE)\ConfigurationFiles\$ConfigurationFile`""
        WorkingDirectory = "$ENV:WORKSPACE\Packer"
    }

    Start-Process @params -NoNewWindow -Wait

    ## Get existing folder where templates are stored

    $TemplateFolder = Get-Folder -Name $TemplateFolder

    ## Move template that was created from script to the destination template folder
    $a = Get-Template -Name $TemplateName
    $b = Get-Folder -Name $TemplateFolder
    Get-Template $a | Move-Template -Destination $b

    ## Disconnect from vCenter
    Disconnect-VIServer $vCenterServer -Confirm:$False
}
</code></pre></div></div>

<p>Once you do this, this will create a Server 2016 template and save it as <code class="language-plaintext highlighter-rouge">Template_Win2016_Std_64bit_Prod</code> within vCenter.</p>

<p>One of the extra things I did was take cues from <a href="https://darksurgeon.io/">DARKSURGEON</a> with customizing the OS, but the world is your oyster when building out a customized server image.</p>

<p>Calling a Powershell script is done by using a Packer Provisioner, specifically the <a href="https://www.packer.io/docs/provisioners/powershell.html">Powershell Provisioner</a>.</p>

<p>By this point, you should have a completely automated method of deploying the latest Server 2016 image to vCenter, and convert it to a template using Packer and Powershell.</p>

<p>Feel free to check out the <a href="https://github.com/jwmoss/powershell_scripts/tree/master/Packer">repository</a> where I store all of this code.</p>]]></content><author><name>Jonathan Moss</name></author><category term="powershell" /><category term="packer" /><category term="vcenter" /><summary type="html"><![CDATA[Updated: 12/15/2018]]></summary></entry></feed>